
> mec-dashboard-backend@1.0.0 dev
> nodemon src/server.js

[33m[nodemon] 3.1.10[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,cjs,json[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'users' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'mec_dashboard'
Executing (default): ALTER TABLE "users" ALTER COLUMN "email" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "email" DROP DEFAULT;ALTER TABLE "users"  ADD UNIQUE ("email");ALTER TABLE "users" ALTER COLUMN "email" TYPE VARCHAR(255)  ;
Executing (default): ALTER TABLE "users" ALTER COLUMN "password" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "password" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "password" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "firstName" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "firstName" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "firstName" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "lastName" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "lastName" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "lastName" TYPE VARCHAR(255);
Executing (default): ALTER TABLE "users" ALTER COLUMN "role" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "role" SET DEFAULT 'staff';DO 'BEGIN CREATE TYPE "public"."enum_users_role" AS ENUM(''admin'', ''staff''); EXCEPTION WHEN duplicate_object THEN null; END';ALTER TABLE "users" ALTER COLUMN "role" TYPE "public"."enum_users_role" USING ("role"::"public"."enum_users_role");
Executing (default): ALTER TABLE "users" ALTER COLUMN "isActive" DROP NOT NULL;ALTER TABLE "users" ALTER COLUMN "isActive" SET DEFAULT true;ALTER TABLE "users" ALTER COLUMN "isActive" TYPE BOOLEAN;
Executing (default): ALTER TABLE "users" ALTER COLUMN "createdAt" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "createdAt" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "createdAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): ALTER TABLE "users" ALTER COLUMN "updatedAt" SET NOT NULL;ALTER TABLE "users" ALTER COLUMN "updatedAt" DROP DEFAULT;ALTER TABLE "users" ALTER COLUMN "updatedAt" TYPE TIMESTAMP WITH TIME ZONE;
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'events' AND c.table_schema = 'public'
Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'events' AND tc.table_catalog = 'mec_dashboard'
Executing (default): ALTER TABLE "events" ALTER COLUMN "mecEventId" SET NOT NULL;ALTER TABLE "events" ALTER COLUMN "mecEventId" DROP DEFAULT;ALTER TABLE "events" ALTER COLUMN "mecEventId" TYPE VARCHAR(255)  UNIQUE; COMMENT ON COLUMN "events"."mecEventId" IS 'Event ID from MEC WordPress plugin';
‚ùå Unable to start server: Error
    at Query.run (/Users/carloschuck/Mec-events/backend/node_modules/sequelize/lib/dialects/postgres/query.js:50:25)
    at /Users/carloschuck/Mec-events/backend/node_modules/sequelize/lib/sequelize.js:315:28
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Event.sync (/Users/carloschuck/Mec-events/backend/node_modules/sequelize/lib/model.js:984:11)
    at async Sequelize.sync (/Users/carloschuck/Mec-events/backend/node_modules/sequelize/lib/sequelize.js:377:9)
    at async startServer (file:///Users/carloschuck/Mec-events/backend/src/server.js:74:5) {
  name: 'SequelizeDatabaseError',
  parent: error: syntax error at or near "UNIQUE"
      at Parser.parseErrorMessage (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:285:98)
      at Parser.handlePacket (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:122:29)
      at Parser.parse (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:35:38)
      at Socket.<anonymous> (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/index.js:11:42)
      at Socket.emit (node:events:508:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
      at Readable.push (node:internal/streams/readable:390:5)
      at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
    length: 96,
    severity: 'ERROR',
    code: '42601',
    detail: undefined,
    hint: undefined,
    position: '187',
    internalPosition: undefined,
    internalQuery: undefined,
    where: undefined,
    schema: undefined,
    table: undefined,
    column: undefined,
    dataType: undefined,
    constraint: undefined,
    file: 'scan.l',
    line: '1188',
    routine: 'scanner_yyerror',
    sql: `ALTER TABLE "events" ALTER COLUMN "mecEventId" SET NOT NULL;ALTER TABLE "events" ALTER COLUMN "mecEventId" DROP DEFAULT;ALTER TABLE "events" ALTER COLUMN "mecEventId" TYPE VARCHAR(255)  UNIQUE; COMMENT ON COLUMN "events"."mecEventId" IS 'Event ID from MEC WordPress plugin';`,
    parameters: undefined
  },
  original: error: syntax error at or near "UNIQUE"
      at Parser.parseErrorMessage (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:285:98)
      at Parser.handlePacket (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:122:29)
      at Parser.parse (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/parser.js:35:38)
      at Socket.<anonymous> (/Users/carloschuck/Mec-events/backend/node_modules/pg-protocol/dist/index.js:11:42)
      at Socket.emit (node:events:508:28)
      at addChunk (node:internal/streams/readable:559:12)
      at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
      at Readable.push (node:internal/streams/readable:390:5)
      at TCP.onStreamRead (node:internal/stream_base_commons:189:23) {
    length: 96,
    severity: 'ERROR',
    code: '42601',
    detail: undefined,
    hint: undefined,
    position: '187',
    internalPosition: undefined,
    internalQuery: undefined,
    where: undefined,
    schema: undefined,
    table: undefined,
    column: undefined,
    dataType: undefined,
    constraint: undefined,
    file: 'scan.l',
    line: '1188',
    routine: 'scanner_yyerror',
    sql: `ALTER TABLE "events" ALTER COLUMN "mecEventId" SET NOT NULL;ALTER TABLE "events" ALTER COLUMN "mecEventId" DROP DEFAULT;ALTER TABLE "events" ALTER COLUMN "mecEventId" TYPE VARCHAR(255)  UNIQUE; COMMENT ON COLUMN "events"."mecEventId" IS 'Event ID from MEC WordPress plugin';`,
    parameters: undefined
  },
  sql: `ALTER TABLE "events" ALTER COLUMN "mecEventId" SET NOT NULL;ALTER TABLE "events" ALTER COLUMN "mecEventId" DROP DEFAULT;ALTER TABLE "events" ALTER COLUMN "mecEventId" TYPE VARCHAR(255)  UNIQUE; COMMENT ON COLUMN "events"."mecEventId" IS 'Event ID from MEC WordPress plugin';`,
  parameters: {}
}
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced
node:events:486
      throw er; // Unhandled 'error' event
      ^

Error: listen EADDRINUSE: address already in use :::5000
    at Server.setupListenHandle [as _listen2] (node:net:1940:16)
    at listenInCluster (node:net:1997:12)
    at Server.listen (node:net:2102:7)
    at app.listen (/Users/carloschuck/Mec-events/backend/node_modules/express/lib/application.js:635:24)
    at startServer (file:///Users/carloschuck/Mec-events/backend/src/server.js:78:9)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
Emitted 'error' event on Server instance at:
    at emitErrorNT (node:net:1976:8)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21) {
  code: 'EADDRINUSE',
  errno: -48,
  syscall: 'listen',
  address: '::',
  port: 5000
}

Node.js v24.9.0
[31m[nodemon] app crashed - waiting for file changes before starting...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[0mGET /api/health [32m200[0m 3.676 ms - 82[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
Executing (default): INSERT INTO "users" ("id","email","password","firstName","lastName","role","isActive","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6,$7,$8) RETURNING "id","email","password","firstName","lastName","role","isActive","createdAt","updatedAt";
[0mPOST /api/auth/register [32m201[0m 176.768 ms - 422[0m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@example.com';
[0mPOST /api/auth/login [33m401[0m 32.184 ms - 49[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@example.com';
[0mPOST /api/auth/login [33m401[0m 20.270 ms - 49[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@example.com';
[0mPOST /api/auth/login [33m401[0m 19.255 ms - 49[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@example.com';
[0mPOST /api/auth/login [33m401[0m 20.066 ms - 49[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@ticketing.com';
[0mPOST /api/auth/login [33m401[0m 3.775 ms - 49[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 148.637 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 125.567 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:42:50.538 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:42:50.586 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 65.252 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:42:50.603 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:42:50.624 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 35.010 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [32m200[0m 31.073 ms - 97[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 17.696 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 13.202 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 4.916 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:43:10.659 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:43:10.672 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 21.328 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:43:10.754 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:43:10.764 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 17.177 ms - 124[0m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 161.529 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
‚úÖ MEC API connection successful
[0mGET /api/events/test-mec [32m200[0m 1608.254 ms - 5982[0m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:55:58.906 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:55:58.941 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 80.320 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:55:58.961 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:55:58.986 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 31.333 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:00.956 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:00.958 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:00.986 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:00.988 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 43.578 ms - 124[0m
[0mGET /api/dashboard/stats [31m500[0m 44.303 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [32m200[0m 20.225 ms - 3536[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 10.283 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:09.883 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:09.899 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 23.171 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:09.978 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:09.989 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 16.906 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:12.243 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 06:56:12.244 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:12.256 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
[0mGET /api/dashboard/stats [31m500[0m 19.326 ms - 124[0m
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 06:56:12.260 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 22.102 ms - 124[0m
üîÑ Running scheduled MEC sync...
üîÑ Syncing events from MEC...
üîÑ Updating event statuses...
Executing (default): UPDATE "events" SET "status"=$1,"updatedAt"=$2 WHERE "endDate" < '2025-10-10 07:00:00.161 +00:00' AND "status" != 'completed'
Executing (default): UPDATE "events" SET "status"=$1,"updatedAt"=$2 WHERE "startDate" <= '2025-10-10 07:00:00.161 +00:00' AND "endDate" >= '2025-10-10 07:00:00.161 +00:00' AND "status" = $3
‚úÖ Event statuses updated
Error fetching events from MEC: Request failed with status code 500
Error in syncEvents: Failed to fetch events from MEC API
Error in syncAll: Failed to fetch events from MEC API
‚ùå Error in scheduled MEC sync: Failed to fetch events from MEC API
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:28:30.378 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:28:30.411 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 57.180 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:28:30.424 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:28:30.437 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 19.102 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 12.846 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 9.500 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '1';
[0mGET /api/events/1 [32m200[0m 16.339 ms - 20539[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '1';
[0mGET /api/events/1/analytics [32m200[0m 8.817 ms - 406[0m
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '1';
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '1';
[0mGET /api/events/1/analytics [36m304[0m 5.467 ms - -[0m
[0mGET /api/events/1 [36m304[0m 18.047 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:28:47.741 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:28:47.766 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 47.424 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:28:47.774 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:28:47.788 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 19.354 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 10.148 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 8.294 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '2';
[0mGET /api/events/2 [32m200[0m 14.255 ms - 23853[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '2';
[0mGET /api/events/2/analytics [32m200[0m 7.970 ms - 406[0m
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '2';
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '2';
[0mGET /api/events/2/analytics [36m304[0m 5.021 ms - -[0m
[0mGET /api/events/2 [36m304[0m 16.450 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 7.533 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 8.659 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '4';
[0mGET /api/events/4 [32m200[0m 8.212 ms - 13882[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '4';
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt", "registrations->checkedInByUser"."id" AS "registrations.checkedInByUser.id", "registrations->checkedInByUser"."firstName" AS "registrations.checkedInByUser.firstName", "registrations->checkedInByUser"."lastName" AS "registrations.checkedInByUser.lastName" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" LEFT OUTER JOIN "users" AS "registrations->checkedInByUser" ON "registrations"."checkedInBy" = "registrations->checkedInByUser"."id" WHERE "Event"."id" = '4';
[0mGET /api/events/4/analytics [32m200[0m 6.242 ms - 310[0m
[0mGET /api/events/4 [36m304[0m 6.937 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt", "registrations"."id" AS "registrations.id", "registrations"."mecBookingId" AS "registrations.mecBookingId", "registrations"."eventId" AS "registrations.eventId", "registrations"."attendeeName" AS "registrations.attendeeName", "registrations"."attendeeEmail" AS "registrations.attendeeEmail", "registrations"."attendeePhone" AS "registrations.attendeePhone", "registrations"."numberOfTickets" AS "registrations.numberOfTickets", "registrations"."registrationDate" AS "registrations.registrationDate", "registrations"."qrCode" AS "registrations.qrCode", "registrations"."checkedIn" AS "registrations.checkedIn", "registrations"."checkedInAt" AS "registrations.checkedInAt", "registrations"."checkedInBy" AS "registrations.checkedInBy", "registrations"."reminderSent" AS "registrations.reminderSent", "registrations"."reminderSentAt" AS "registrations.reminderSentAt", "registrations"."followUpSent" AS "registrations.followUpSent", "registrations"."followUpSentAt" AS "registrations.followUpSentAt", "registrations"."metadata" AS "registrations.metadata", "registrations"."createdAt" AS "registrations.createdAt", "registrations"."updatedAt" AS "registrations.updatedAt" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" WHERE "Event"."id" = '4';
[0mGET /api/events/4/analytics [36m304[0m 4.725 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:29:05.457 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:29:05.473 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 23.772 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:29:05.482 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:29:05.494 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 18.704 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 36.846 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 22.476 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:36:08.238 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:36:08.256 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 26.825 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:36:08.264 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:36:08.278 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 20.323 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 8.131 ms - -[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count("Event"."id") AS "count" FROM "events" AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId";
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" ORDER BY "Event"."startDate" ASC LIMIT 10 OFFSET 0) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
[0mGET /api/events [36m304[0m 9.947 ms - -[0m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

‚ùå Invalid webhook signature
[0mPOST /api/webhooks/mec [33m401[0m 4.019 ms - 47[0m

üì• Received webhook: test.webhook
   From: housesoflight.org
   Time: 2025-10-10
‚úÖ Test webhook received successfully
[0mPOST /api/webhooks/mec [32m200[0m 0.808 ms - 91[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
üîÑ Syncing events from MEC...
Error fetching events from MEC: Request failed with status code 401
Error in syncEvents: Failed to fetch events from MEC API
Error in syncAll: Failed to fetch events from MEC API
[0mPOST /api/events/sync [31m500[0m 1666.473 ms - 96[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:53:47.808 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:53:47.863 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 102.842 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:53:47.888 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:53:47.905 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 26.418 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:54:24.664 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:54:24.691 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 57.435 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:54:24.699 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:54:24.711 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 16.937 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 226.155 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:54:57.892 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:54:57.921 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 34.971 ms - 124[0m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node src/server.js`[39m
Executing (default): SELECT 1+1 AS result
‚úÖ Database connection established successfully
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'users'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_users_role' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'events'
Executing (default): SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = 'public' AND t.typname='enum_events_status' GROUP BY 1
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'events' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'registrations'
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'registrations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
‚úÖ Database models synced

üöÄ Server running on port 3001
üìç Environment: development
üåê API: http://localhost:3001/api
‚ù§Ô∏è  Health: http://localhost:3001/api/health


üöÄ Starting all cron jobs...

üìÖ MEC sync scheduled: 0 */3 * * *
üìÖ Event reminders scheduled: 0 9 * * *
üìÖ Follow-up emails scheduled: 0 10 * * *
üìÖ Status updates scheduled: 0 0 * * *

‚úÖ All cron jobs started

Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 276.261 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:55:30.165 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:55:30.202 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id", "Event"."title", "Event"."startDate" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 51.477 ms - 124[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."email" = 'admin@test.com';
[0mPOST /api/auth/login [32m200[0m 185.110 ms - 410[0m
Executing (default): SELECT "id", "email", "password", "firstName", "lastName", "role", "isActive", "createdAt", "updatedAt" FROM "users" AS "User" WHERE "User"."id" = 1;
Executing (default): SELECT count(*) AS "count" FROM "events" AS "Event";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration";
Executing (default): SELECT count(*) AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."checkedIn" = true;
Executing (default): SELECT "Event".*, "registrations"."id" AS "registrations.id", "registrations"."checkedIn" AS "registrations.checkedIn" FROM (SELECT "Event"."id", "Event"."mecEventId", "Event"."title", "Event"."description", "Event"."startDate", "Event"."endDate", "Event"."location", "Event"."address", "Event"."capacity", "Event"."imageUrl", "Event"."status", "Event"."metadata", "Event"."lastSyncedAt", "Event"."createdAt", "Event"."updatedAt" FROM "events" AS "Event" WHERE "Event"."startDate" >= '2025-10-10 07:55:37.645 +00:00' AND "Event"."status" IN ('upcoming', 'ongoing') ORDER BY "Event"."startDate" ASC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY "Event"."startDate" ASC;
Executing (default): SELECT "Registration"."id", "Registration"."mecBookingId", "Registration"."eventId", "Registration"."attendeeName", "Registration"."attendeeEmail", "Registration"."attendeePhone", "Registration"."numberOfTickets", "Registration"."registrationDate", "Registration"."qrCode", "Registration"."checkedIn", "Registration"."checkedInAt", "Registration"."checkedInBy", "Registration"."reminderSent", "Registration"."reminderSentAt", "Registration"."followUpSent", "Registration"."followUpSentAt", "Registration"."metadata", "Registration"."createdAt", "Registration"."updatedAt", "event"."id" AS "event.id", "event"."title" AS "event.title", "event"."startDate" AS "event.startDate" FROM "registrations" AS "Registration" LEFT OUTER JOIN "events" AS "event" ON "Registration"."eventId" = "event"."id" ORDER BY "Registration"."registrationDate" DESC LIMIT 10;
Executing (default): SELECT "status", COUNT("id") AS "count" FROM "events" AS "Event" GROUP BY "status";
Executing (default): SELECT DATE("registrationDate") AS "date", COUNT("id") AS "count" FROM "registrations" AS "Registration" WHERE "Registration"."registrationDate" >= '2025-09-10 07:55:37.672 +00:00' GROUP BY DATE("registrationDate") ORDER BY DATE("registrationDate") ASC;
Executing (default): SELECT "Event".* FROM (SELECT "Event"."id", "Event"."title", "Event"."startDate", COUNT("registrations"."id") AS "registrationCount" FROM "events" AS "Event" GROUP BY "Event"."id", "Event"."title", "Event"."startDate" ORDER BY COUNT("registrations"."id") DESC LIMIT 5) AS "Event" LEFT OUTER JOIN "registrations" AS "registrations" ON "Event"."id" = "registrations"."eventId" ORDER BY COUNT("registrations"."id") DESC;
[0mGET /api/dashboard/stats [31m500[0m 38.166 ms - 124[0m
üëã SIGTERM received. Shutting down gracefully...
üõë Stopping all cron jobs...
‚úÖ All cron jobs stopped
